@model ShopProject.Models.CategoryFieldViweModel

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit</h1>

<h4>Category</h4>
<hr/>
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" asp-controller="Category">
            <div asp-validation-summary="All" class="text-danger"></div>
            <input type="hidden" asp-for="Categori.Id"/>
            <div class="form-group">
                <label asp-for="Categori.Name" class="control-label"></label>
                <input asp-for="Categori.Name" class="form-control"/>
                <span asp-validation-for="Categori.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Categori.ParentId" class="control-label"></label>
                <select asp-for="Categori.ParentId" class="form-control" asp-items="ViewBag.ParentId">
                    <option value="">null</option>
                </select>
                @* <span asp-validation-for="Categori.ParentId" class="text-danger"></span> *@
            </div>
            @if (Model.Fields != null)
            {
                for (int i = 0; i < Model.Fields.Count; i++)
                {
                    <div class="form-group" id="existing-field-@i">
                        <label asp-for="@Model.Fields[i].Name" class="control-label"></label>
                        <input asp-for="@Model.Fields[i].Name" class="form-control"/>
                        <span asp-validation-for="@Model.Fields[i].Name" class="text-danger"></span>
                        <input type="hidden" name="Fields[@i].Id" value="@Model.Fields[i].Id"/>
                        <input type="hidden" name="Fields[@i].CategoryId" value="@Model.Fields[i].CategoryId"/>
                        <button type="button" class="btn btn-danger ml-2" onclick="removeExistingField(@i)">Remove</button>
                    </div>
                }
            }
            <br/>
            <div id="additional-fields"></div>
            <div class="form-group">
                @if (Model.Categori.Products.Count > 0)
                {
                    <div>
                        You can't Edit this Category because it contains products!
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary" disabled/>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary"/>
                    </div>
                }
                <br/>
                <button type="button" class="btn btn-secondary" onclick="addField()">Add Field</button>
            </div>
            <br/>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
    var fieldIndex = @Model.Fields.Count;
    
    function addField() {
        var container = document.getElementById('additional-fields');
    
        var inputGroup = document.createElement('div');
        inputGroup.className = 'input-group mb-3';
    
        var input = document.createElement('input');
        input.type = 'text';
        input.name = 'Fields[' + fieldIndex + '].Name';
        input.className = 'form-control';
        input.placeholder = 'Enter field name';
    
        var removeButton = document.createElement('button');
        removeButton.innerHTML = 'Remove';
        removeButton.type = 'button';
        removeButton.className = 'btn btn-danger ml-2';
        removeButton.onclick = function() {
            container.removeChild(inputGroup);
        };
    
        inputGroup.appendChild(input);
        inputGroup.appendChild(removeButton);
        container.appendChild(inputGroup);
        fieldIndex++;
    }

    function removeExistingField(index) {
        var fieldElement = document.getElementById('existing-field-' + index);
        fieldElement.style.display = 'none';
        // Add a hidden input to mark this field as removed
        var input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'Fields[' + index + '].IsDeleted';
        input.value = 'true';
        fieldElement.appendChild(input);
    }
</script>
}
@* function removeExistingField(index) { *@
@* var fieldElement = document.getElementById('existing-field-' + index); *@
@* fieldElement.remove(); *@
@* // Add a hidden input to mark this field as removed *@
@* var container = document.getElementById('additional-fields'); *@
@* var input = document.createElement('input'); *@
@* input.type = 'hidden'; *@
@* input.name = 'Fields[' + index + '].IsRemoved'; *@
@* input.value = 'true'; *@
@* container.appendChild(input); *@
@* } *@